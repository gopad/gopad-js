/* tslint:disable */
/* eslint-disable */
/**
 * Gopad OpenAPI
 * API definition for Gopad, Etherpad for markdown with go
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: gopad@webhippie.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { Notification } from "../model";
// @ts-ignore
import type { Team } from "../model";
// @ts-ignore
import type { TeamUserParams } from "../model";
// @ts-ignore
import type { TeamUsers } from "../model";
// @ts-ignore
import type { Teams } from "../model";
/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Attach a user to team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTeamToUser: async (
      teamId: string,
      teamUserParams: TeamUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("attachTeamToUser", "teamId", teamId);
      // verify required parameter 'teamUserParams' is not null or undefined
      assertParamExists("attachTeamToUser", "teamUserParams", teamUserParams);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new team
     * @param {Team} team The team data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTeam: async (
      team: Team,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'team' is not null or undefined
      assertParamExists("createTeam", "team", team);
      const localVarPath = `/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        team,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific team
     * @param {string} teamId A team identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeam: async (
      teamId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("deleteTeam", "teamId", teamId);
      const localVarPath = `/teams/{team_id}`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a user from team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromUser: async (
      teamId: string,
      teamUserParams: TeamUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("deleteTeamFromUser", "teamId", teamId);
      // verify required parameter 'teamUserParams' is not null or undefined
      assertParamExists("deleteTeamFromUser", "teamUserParams", teamUserParams);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all users attached to team
     * @param {string} teamId A team identifier or slug
     * @param {string} [search] Search query
     * @param {ListTeamUsersSortEnum} [sort] Sorting column
     * @param {ListTeamUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamUsers: async (
      teamId: string,
      search?: string,
      sort?: ListTeamUsersSortEnum,
      order?: ListTeamUsersOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("listTeamUsers", "teamId", teamId);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available teams
     * @param {string} [search] Search query
     * @param {ListTeamsSortEnum} [sort] Sorting column
     * @param {ListTeamsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeams: async (
      search?: string,
      sort?: ListTeamsSortEnum,
      order?: ListTeamsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user perms for team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamUser: async (
      teamId: string,
      teamUserParams: TeamUserParams,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("permitTeamUser", "teamId", teamId);
      // verify required parameter 'teamUserParams' is not null or undefined
      assertParamExists("permitTeamUser", "teamUserParams", teamUserParams);
      const localVarPath = `/teams/{team_id}/users`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teamUserParams,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific team
     * @param {string} teamId A team identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTeam: async (
      teamId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("showTeam", "teamId", teamId);
      const localVarPath = `/teams/{team_id}`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific team
     * @param {string} teamId A team identifier or slug
     * @param {Team} team The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeam: async (
      teamId: string,
      team: Team,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'teamId' is not null or undefined
      assertParamExists("updateTeam", "teamId", teamId);
      // verify required parameter 'team' is not null or undefined
      assertParamExists("updateTeam", "team", team);
      const localVarPath = `/teams/{team_id}`.replace(
        `{${"team_id"}}`,
        encodeURIComponent(String(teamId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Cookie required
      await setApiKeyToObject(localVarHeaderParameter, "Cookie", configuration);

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        team,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Attach a user to team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to attach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachTeamToUser(
      teamId: string,
      teamUserParams: TeamUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachTeamToUser(
          teamId,
          teamUserParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.attachTeamToUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new team
     * @param {Team} team The team data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTeam(
      team: Team,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createTeam(
        team,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.createTeam"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a specific team
     * @param {string} teamId A team identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTeam(
      teamId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeam(
        teamId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.deleteTeam"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a user from team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTeamFromUser(
      teamId: string,
      teamUserParams: TeamUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTeamFromUser(
          teamId,
          teamUserParams,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.deleteTeamFromUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all users attached to team
     * @param {string} teamId A team identifier or slug
     * @param {string} [search] Search query
     * @param {ListTeamUsersSortEnum} [sort] Sorting column
     * @param {ListTeamUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTeamUsers(
      teamId: string,
      search?: string,
      sort?: ListTeamUsersSortEnum,
      order?: ListTeamUsersOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamUsers>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTeamUsers(
        teamId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.listTeamUsers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all available teams
     * @param {string} [search] Search query
     * @param {ListTeamsSortEnum} [sort] Sorting column
     * @param {ListTeamsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTeams(
      search?: string,
      sort?: ListTeamsSortEnum,
      order?: ListTeamsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teams>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTeams(
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.listTeams"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update user perms for team
     * @param {string} teamId A team identifier or slug
     * @param {TeamUserParams} teamUserParams The team user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitTeamUser(
      teamId: string,
      teamUserParams: TeamUserParams,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitTeamUser(
        teamId,
        teamUserParams,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.permitTeamUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch a specific team
     * @param {string} teamId A team identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showTeam(
      teamId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showTeam(
        teamId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.showTeam"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a specific team
     * @param {string} teamId A team identifier or slug
     * @param {Team} team The team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTeam(
      teamId: string,
      team: Team,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeam(
        teamId,
        team,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamApi.updateTeam"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TeamApiFp(configuration);
  return {
    /**
     *
     * @summary Attach a user to team
     * @param {TeamApiAttachTeamToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTeamToUser(
      requestParameters: TeamApiAttachTeamToUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachTeamToUser(
          requestParameters.teamId,
          requestParameters.teamUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new team
     * @param {TeamApiCreateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTeam(
      requestParameters: TeamApiCreateTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Team> {
      return localVarFp
        .createTeam(requestParameters.team, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific team
     * @param {TeamApiDeleteTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeam(
      requestParameters: TeamApiDeleteTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteTeam(requestParameters.teamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a user from team
     * @param {TeamApiDeleteTeamFromUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeamFromUser(
      requestParameters: TeamApiDeleteTeamFromUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteTeamFromUser(
          requestParameters.teamId,
          requestParameters.teamUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all users attached to team
     * @param {TeamApiListTeamUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeamUsers(
      requestParameters: TeamApiListTeamUsersRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TeamUsers> {
      return localVarFp
        .listTeamUsers(
          requestParameters.teamId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available teams
     * @param {TeamApiListTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeams(
      requestParameters: TeamApiListTeamsRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Teams> {
      return localVarFp
        .listTeams(
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user perms for team
     * @param {TeamApiPermitTeamUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitTeamUser(
      requestParameters: TeamApiPermitTeamUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitTeamUser(
          requestParameters.teamId,
          requestParameters.teamUserParams,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific team
     * @param {TeamApiShowTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTeam(
      requestParameters: TeamApiShowTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Team> {
      return localVarFp
        .showTeam(requestParameters.teamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific team
     * @param {TeamApiUpdateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTeam(
      requestParameters: TeamApiUpdateTeamRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Team> {
      return localVarFp
        .updateTeam(requestParameters.teamId, requestParameters.team, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for attachTeamToUser operation in TeamApi.
 * @export
 * @interface TeamApiAttachTeamToUserRequest
 */
export interface TeamApiAttachTeamToUserRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiAttachTeamToUser
   */
  readonly teamId: string;

  /**
   * The team user data to attach
   * @type {TeamUserParams}
   * @memberof TeamApiAttachTeamToUser
   */
  readonly teamUserParams: TeamUserParams;
}

/**
 * Request parameters for createTeam operation in TeamApi.
 * @export
 * @interface TeamApiCreateTeamRequest
 */
export interface TeamApiCreateTeamRequest {
  /**
   * The team data to create
   * @type {Team}
   * @memberof TeamApiCreateTeam
   */
  readonly team: Team;
}

/**
 * Request parameters for deleteTeam operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamRequest
 */
export interface TeamApiDeleteTeamRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiDeleteTeam
   */
  readonly teamId: string;
}

/**
 * Request parameters for deleteTeamFromUser operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamFromUserRequest
 */
export interface TeamApiDeleteTeamFromUserRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiDeleteTeamFromUser
   */
  readonly teamId: string;

  /**
   * The team user data to unlink
   * @type {TeamUserParams}
   * @memberof TeamApiDeleteTeamFromUser
   */
  readonly teamUserParams: TeamUserParams;
}

/**
 * Request parameters for listTeamUsers operation in TeamApi.
 * @export
 * @interface TeamApiListTeamUsersRequest
 */
export interface TeamApiListTeamUsersRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiListTeamUsers
   */
  readonly teamId: string;

  /**
   * Search query
   * @type {string}
   * @memberof TeamApiListTeamUsers
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'username' | 'email' | 'fullname' | 'admin' | 'active'}
   * @memberof TeamApiListTeamUsers
   */
  readonly sort?: ListTeamUsersSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof TeamApiListTeamUsers
   */
  readonly order?: ListTeamUsersOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof TeamApiListTeamUsers
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof TeamApiListTeamUsers
   */
  readonly offset?: number;
}

/**
 * Request parameters for listTeams operation in TeamApi.
 * @export
 * @interface TeamApiListTeamsRequest
 */
export interface TeamApiListTeamsRequest {
  /**
   * Search query
   * @type {string}
   * @memberof TeamApiListTeams
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {'slug' | 'name'}
   * @memberof TeamApiListTeams
   */
  readonly sort?: ListTeamsSortEnum;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof TeamApiListTeams
   */
  readonly order?: ListTeamsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof TeamApiListTeams
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof TeamApiListTeams
   */
  readonly offset?: number;
}

/**
 * Request parameters for permitTeamUser operation in TeamApi.
 * @export
 * @interface TeamApiPermitTeamUserRequest
 */
export interface TeamApiPermitTeamUserRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiPermitTeamUser
   */
  readonly teamId: string;

  /**
   * The team user data to update
   * @type {TeamUserParams}
   * @memberof TeamApiPermitTeamUser
   */
  readonly teamUserParams: TeamUserParams;
}

/**
 * Request parameters for showTeam operation in TeamApi.
 * @export
 * @interface TeamApiShowTeamRequest
 */
export interface TeamApiShowTeamRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiShowTeam
   */
  readonly teamId: string;
}

/**
 * Request parameters for updateTeam operation in TeamApi.
 * @export
 * @interface TeamApiUpdateTeamRequest
 */
export interface TeamApiUpdateTeamRequest {
  /**
   * A team identifier or slug
   * @type {string}
   * @memberof TeamApiUpdateTeam
   */
  readonly teamId: string;

  /**
   * The team data to update
   * @type {Team}
   * @memberof TeamApiUpdateTeam
   */
  readonly team: Team;
}

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
  /**
   *
   * @summary Attach a user to team
   * @param {TeamApiAttachTeamToUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public attachTeamToUser(
    requestParameters: TeamApiAttachTeamToUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .attachTeamToUser(
        requestParameters.teamId,
        requestParameters.teamUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new team
   * @param {TeamApiCreateTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public createTeam(
    requestParameters: TeamApiCreateTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .createTeam(requestParameters.team, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific team
   * @param {TeamApiDeleteTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public deleteTeam(
    requestParameters: TeamApiDeleteTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .deleteTeam(requestParameters.teamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a user from team
   * @param {TeamApiDeleteTeamFromUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public deleteTeamFromUser(
    requestParameters: TeamApiDeleteTeamFromUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .deleteTeamFromUser(
        requestParameters.teamId,
        requestParameters.teamUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all users attached to team
   * @param {TeamApiListTeamUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public listTeamUsers(
    requestParameters: TeamApiListTeamUsersRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .listTeamUsers(
        requestParameters.teamId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available teams
   * @param {TeamApiListTeamsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public listTeams(
    requestParameters: TeamApiListTeamsRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .listTeams(
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user perms for team
   * @param {TeamApiPermitTeamUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public permitTeamUser(
    requestParameters: TeamApiPermitTeamUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .permitTeamUser(
        requestParameters.teamId,
        requestParameters.teamUserParams,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific team
   * @param {TeamApiShowTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public showTeam(
    requestParameters: TeamApiShowTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .showTeam(requestParameters.teamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific team
   * @param {TeamApiUpdateTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public updateTeam(
    requestParameters: TeamApiUpdateTeamRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamApiFp(this.configuration)
      .updateTeam(requestParameters.teamId, requestParameters.team, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ListTeamUsersSortEnum = {
  Username: "username",
  Email: "email",
  Fullname: "fullname",
  Admin: "admin",
  Active: "active",
} as const;
export type ListTeamUsersSortEnum =
  (typeof ListTeamUsersSortEnum)[keyof typeof ListTeamUsersSortEnum];
/**
 * @export
 */
export const ListTeamUsersOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListTeamUsersOrderEnum =
  (typeof ListTeamUsersOrderEnum)[keyof typeof ListTeamUsersOrderEnum];
/**
 * @export
 */
export const ListTeamsSortEnum = {
  Slug: "slug",
  Name: "name",
} as const;
export type ListTeamsSortEnum =
  (typeof ListTeamsSortEnum)[keyof typeof ListTeamsSortEnum];
/**
 * @export
 */
export const ListTeamsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListTeamsOrderEnum =
  (typeof ListTeamsOrderEnum)[keyof typeof ListTeamsOrderEnum];
