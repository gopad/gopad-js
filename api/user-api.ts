/* tslint:disable */
/* eslint-disable */
/**
 * Gopad OpenAPI
 * API definition for Gopad
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
import { Configuration } from "../configuration";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { GeneralError } from "../model";
// @ts-ignore
import { TeamUser } from "../model";
// @ts-ignore
import { User } from "../model";
// @ts-ignore
import { UserTeamParams } from "../model";
// @ts-ignore
import { ValidationError } from "../model";
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Assign a team to user
     * @param {string} userId A user UUID or slug
     * @param {UserTeamParams} userTeam The user team data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appendUserToTeam: async (
      userId: string,
      userTeam: UserTeamParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("appendUserToTeam", "userId", userId);
      // verify required parameter 'userTeam' is not null or undefined
      assertParamExists("appendUserToTeam", "userTeam", userTeam);
      const localVarPath = `/users/{user_id}/teams`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userTeam,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new user
     * @param {User} user The user data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: async (
      user: User,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'user' is not null or undefined
      assertParamExists("createUser", "user", user);
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific user
     * @param {string} userId A user UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: async (
      userId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("deleteUser", "userId", userId);
      const localVarPath = `/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a team from user
     * @param {string} userId A user UUID or slug
     * @param {UserTeamParams} userTeam The user team data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromTeam: async (
      userId: string,
      userTeam: UserTeamParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("deleteUserFromTeam", "userId", userId);
      // verify required parameter 'userTeam' is not null or undefined
      assertParamExists("deleteUserFromTeam", "userTeam", userTeam);
      const localVarPath = `/users/{user_id}/teams`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userTeam,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all teams assigned to user
     * @param {string} userId A user UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserTeams: async (
      userId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("listUserTeams", "userId", userId);
      const localVarPath = `/users/{user_id}/teams`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update team perms for user
     * @param {string} userId A user UUID or slug
     * @param {UserTeamParams} userTeam The user team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitUserTeam: async (
      userId: string,
      userTeam: UserTeamParams,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("permitUserTeam", "userId", userId);
      // verify required parameter 'userTeam' is not null or undefined
      assertParamExists("permitUserTeam", "userTeam", userTeam);
      const localVarPath = `/users/{user_id}/teams`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userTeam,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific user
     * @param {string} userId A user UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showUser: async (
      userId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("showUser", "userId", userId);
      const localVarPath = `/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific user
     * @param {string} userId A user UUID or slug
     * @param {User} user The user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: async (
      userId: string,
      user: User,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("updateUser", "userId", userId);
      // verify required parameter 'user' is not null or undefined
      assertParamExists("updateUser", "user", user);
      const localVarPath = `/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Assign a team to user
     * @param {string} userId A user UUID or slug
     * @param {UserTeamParams} userTeam The user team data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appendUserToTeam(
      userId: string,
      userTeam: UserTeamParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.appendUserToTeam(
          userId,
          userTeam,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a new user
     * @param {User} user The user data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUser(
      user: User,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(
        user,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete a specific user
     * @param {string} userId A user UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUser(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(
        userId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove a team from user
     * @param {string} userId A user UUID or slug
     * @param {UserTeamParams} userTeam The user team data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserFromTeam(
      userId: string,
      userTeam: UserTeamParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUserFromTeam(
          userId,
          userTeam,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Fetch all teams assigned to user
     * @param {string} userId A user UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUserTeams(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<TeamUser>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUserTeams(
        userId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Fetch all available users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUsers(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update team perms for user
     * @param {string} userId A user UUID or slug
     * @param {UserTeamParams} userTeam The user team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitUserTeam(
      userId: string,
      userTeam: UserTeamParams,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralError>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitUserTeam(
        userId,
        userTeam,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Fetch a specific user
     * @param {string} userId A user UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showUser(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showUser(
        userId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a specific user
     * @param {string} userId A user UUID or slug
     * @param {User} user The user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUser(
      userId: string,
      user: User,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(
        userId,
        user,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary Assign a team to user
     * @param {string} userId A user UUID or slug
     * @param {UserTeamParams} userTeam The user team data to assign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appendUserToTeam(
      userId: string,
      userTeam: UserTeamParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .appendUserToTeam(userId, userTeam, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new user
     * @param {User} user The user data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(user: User, options?: any): AxiosPromise<User> {
      return localVarFp
        .createUser(user, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific user
     * @param {string} userId A user UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(userId: string, options?: any): AxiosPromise<GeneralError> {
      return localVarFp
        .deleteUser(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a team from user
     * @param {string} userId A user UUID or slug
     * @param {UserTeamParams} userTeam The user team data to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFromTeam(
      userId: string,
      userTeam: UserTeamParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .deleteUserFromTeam(userId, userTeam, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all teams assigned to user
     * @param {string} userId A user UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserTeams(
      userId: string,
      options?: any
    ): AxiosPromise<Array<TeamUser>> {
      return localVarFp
        .listUserTeams(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: any): AxiosPromise<Array<User>> {
      return localVarFp
        .listUsers(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update team perms for user
     * @param {string} userId A user UUID or slug
     * @param {UserTeamParams} userTeam The user team data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitUserTeam(
      userId: string,
      userTeam: UserTeamParams,
      options?: any
    ): AxiosPromise<GeneralError> {
      return localVarFp
        .permitUserTeam(userId, userTeam, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific user
     * @param {string} userId A user UUID or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showUser(userId: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .showUser(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific user
     * @param {string} userId A user UUID or slug
     * @param {User} user The user data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(userId: string, user: User, options?: any): AxiosPromise<User> {
      return localVarFp
        .updateUser(userId, user, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for appendUserToTeam operation in UserApi.
 * @export
 * @interface UserApiAppendUserToTeamRequest
 */
export interface UserApiAppendUserToTeamRequest {
  /**
   * A user UUID or slug
   * @type {string}
   * @memberof UserApiAppendUserToTeam
   */
  readonly userId: string;

  /**
   * The user team data to assign
   * @type {UserTeamParams}
   * @memberof UserApiAppendUserToTeam
   */
  readonly userTeam: UserTeamParams;
}

/**
 * Request parameters for createUser operation in UserApi.
 * @export
 * @interface UserApiCreateUserRequest
 */
export interface UserApiCreateUserRequest {
  /**
   * The user data to create
   * @type {User}
   * @memberof UserApiCreateUser
   */
  readonly user: User;
}

/**
 * Request parameters for deleteUser operation in UserApi.
 * @export
 * @interface UserApiDeleteUserRequest
 */
export interface UserApiDeleteUserRequest {
  /**
   * A user UUID or slug
   * @type {string}
   * @memberof UserApiDeleteUser
   */
  readonly userId: string;
}

/**
 * Request parameters for deleteUserFromTeam operation in UserApi.
 * @export
 * @interface UserApiDeleteUserFromTeamRequest
 */
export interface UserApiDeleteUserFromTeamRequest {
  /**
   * A user UUID or slug
   * @type {string}
   * @memberof UserApiDeleteUserFromTeam
   */
  readonly userId: string;

  /**
   * The user team data to delete
   * @type {UserTeamParams}
   * @memberof UserApiDeleteUserFromTeam
   */
  readonly userTeam: UserTeamParams;
}

/**
 * Request parameters for listUserTeams operation in UserApi.
 * @export
 * @interface UserApiListUserTeamsRequest
 */
export interface UserApiListUserTeamsRequest {
  /**
   * A user UUID or slug
   * @type {string}
   * @memberof UserApiListUserTeams
   */
  readonly userId: string;
}

/**
 * Request parameters for permitUserTeam operation in UserApi.
 * @export
 * @interface UserApiPermitUserTeamRequest
 */
export interface UserApiPermitUserTeamRequest {
  /**
   * A user UUID or slug
   * @type {string}
   * @memberof UserApiPermitUserTeam
   */
  readonly userId: string;

  /**
   * The user team data to update
   * @type {UserTeamParams}
   * @memberof UserApiPermitUserTeam
   */
  readonly userTeam: UserTeamParams;
}

/**
 * Request parameters for showUser operation in UserApi.
 * @export
 * @interface UserApiShowUserRequest
 */
export interface UserApiShowUserRequest {
  /**
   * A user UUID or slug
   * @type {string}
   * @memberof UserApiShowUser
   */
  readonly userId: string;
}

/**
 * Request parameters for updateUser operation in UserApi.
 * @export
 * @interface UserApiUpdateUserRequest
 */
export interface UserApiUpdateUserRequest {
  /**
   * A user UUID or slug
   * @type {string}
   * @memberof UserApiUpdateUser
   */
  readonly userId: string;

  /**
   * The user data to update
   * @type {User}
   * @memberof UserApiUpdateUser
   */
  readonly user: User;
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Assign a team to user
   * @param {UserApiAppendUserToTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public appendUserToTeam(
    requestParameters: UserApiAppendUserToTeamRequest,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .appendUserToTeam(
        requestParameters.userId,
        requestParameters.userTeam,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new user
   * @param {UserApiCreateUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public createUser(
    requestParameters: UserApiCreateUserRequest,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .createUser(requestParameters.user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific user
   * @param {UserApiDeleteUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public deleteUser(
    requestParameters: UserApiDeleteUserRequest,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .deleteUser(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a team from user
   * @param {UserApiDeleteUserFromTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public deleteUserFromTeam(
    requestParameters: UserApiDeleteUserFromTeamRequest,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .deleteUserFromTeam(
        requestParameters.userId,
        requestParameters.userTeam,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all teams assigned to user
   * @param {UserApiListUserTeamsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public listUserTeams(
    requestParameters: UserApiListUserTeamsRequest,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .listUserTeams(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public listUsers(options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .listUsers(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update team perms for user
   * @param {UserApiPermitUserTeamRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public permitUserTeam(
    requestParameters: UserApiPermitUserTeamRequest,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .permitUserTeam(
        requestParameters.userId,
        requestParameters.userTeam,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific user
   * @param {UserApiShowUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public showUser(
    requestParameters: UserApiShowUserRequest,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .showUser(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific user
   * @param {UserApiUpdateUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public updateUser(
    requestParameters: UserApiUpdateUserRequest,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .updateUser(requestParameters.userId, requestParameters.user, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
