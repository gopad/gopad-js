/* tslint:disable */
/* eslint-disable */
/**
 * Gopad OpenAPI
 * API definition for Gopad, Etherpad for markdown with Go
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: gopad@webhippie.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from "url";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { CreateGroupRequest } from "../model";
// @ts-ignore
import type { DeleteGroupFromUserRequest } from "../model";
// @ts-ignore
import type { Group } from "../model";
// @ts-ignore
import type { ListGroupUsers200Response } from "../model";
// @ts-ignore
import type { ListGroups200Response } from "../model";
// @ts-ignore
import type { Notification } from "../model";
// @ts-ignore
import type { PermitGroupUserRequest } from "../model";
/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Attach a user to group
     * @param {string} groupId A group identifier or slug
     * @param {PermitGroupUserRequest} permitGroupUserRequest The group user data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachGroupToUser: async (
      groupId: string,
      permitGroupUserRequest: PermitGroupUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("attachGroupToUser", "groupId", groupId);
      // verify required parameter 'permitGroupUserRequest' is not null or undefined
      assertParamExists(
        "attachGroupToUser",
        "permitGroupUserRequest",
        permitGroupUserRequest,
      );
      const localVarPath = `/groups/{group_id}/users`.replace(
        `{${"group_id"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        permitGroupUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new group
     * @param {CreateGroupRequest} createGroupRequest The group data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup: async (
      createGroupRequest: CreateGroupRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createGroupRequest' is not null or undefined
      assertParamExists(
        "createGroup",
        "createGroupRequest",
        createGroupRequest,
      );
      const localVarPath = `/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createGroupRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a specific group
     * @param {string} groupId A group identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup: async (
      groupId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("deleteGroup", "groupId", groupId);
      const localVarPath = `/groups/{group_id}`.replace(
        `{${"group_id"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unlink a user from group
     * @param {string} groupId A group identifier or slug
     * @param {DeleteGroupFromUserRequest} deleteGroupFromUserRequest The group user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupFromUser: async (
      groupId: string,
      deleteGroupFromUserRequest: DeleteGroupFromUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("deleteGroupFromUser", "groupId", groupId);
      // verify required parameter 'deleteGroupFromUserRequest' is not null or undefined
      assertParamExists(
        "deleteGroupFromUser",
        "deleteGroupFromUserRequest",
        deleteGroupFromUserRequest,
      );
      const localVarPath = `/groups/{group_id}/users`.replace(
        `{${"group_id"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteGroupFromUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all users attached to group
     * @param {string} groupId A group identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListGroupUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGroupUsers: async (
      groupId: string,
      search?: string,
      sort?: string,
      order?: ListGroupUsersOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("listGroupUsers", "groupId", groupId);
      const localVarPath = `/groups/{group_id}/users`.replace(
        `{${"group_id"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch all available groups
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListGroupsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGroups: async (
      search?: string,
      sort?: string,
      order?: ListGroupsOrderEnum,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/groups`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (search !== undefined) {
        localVarQueryParameter["search"] = search;
      }

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (order !== undefined) {
        localVarQueryParameter["order"] = order;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user perms for group
     * @param {string} groupId A group identifier or slug
     * @param {PermitGroupUserRequest} permitGroupUserRequest The group user data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitGroupUser: async (
      groupId: string,
      permitGroupUserRequest: PermitGroupUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("permitGroupUser", "groupId", groupId);
      // verify required parameter 'permitGroupUserRequest' is not null or undefined
      assertParamExists(
        "permitGroupUser",
        "permitGroupUserRequest",
        permitGroupUserRequest,
      );
      const localVarPath = `/groups/{group_id}/users`.replace(
        `{${"group_id"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        permitGroupUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Fetch a specific group
     * @param {string} groupId A group identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showGroup: async (
      groupId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("showGroup", "groupId", groupId);
      const localVarPath = `/groups/{group_id}`.replace(
        `{${"group_id"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a specific group
     * @param {string} groupId A group identifier or slug
     * @param {CreateGroupRequest} createGroupRequest The group data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup: async (
      groupId: string,
      createGroupRequest: CreateGroupRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'groupId' is not null or undefined
      assertParamExists("updateGroup", "groupId", groupId);
      // verify required parameter 'createGroupRequest' is not null or undefined
      assertParamExists(
        "updateGroup",
        "createGroupRequest",
        createGroupRequest,
      );
      const localVarPath = `/groups/{group_id}`.replace(
        `{${"group_id"}}`,
        encodeURIComponent(String(groupId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Basic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      // authentication Header required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-API-Key",
        configuration,
      );

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createGroupRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GroupApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Attach a user to group
     * @param {string} groupId A group identifier or slug
     * @param {PermitGroupUserRequest} permitGroupUserRequest The group user data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async attachGroupToUser(
      groupId: string,
      permitGroupUserRequest: PermitGroupUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.attachGroupToUser(
          groupId,
          permitGroupUserRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.attachGroupToUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Create a new group
     * @param {CreateGroupRequest} createGroupRequest The group data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createGroup(
      createGroupRequest: CreateGroupRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(
        createGroupRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.createGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a specific group
     * @param {string} groupId A group identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGroup(
      groupId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(
        groupId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.deleteGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Unlink a user from group
     * @param {string} groupId A group identifier or slug
     * @param {DeleteGroupFromUserRequest} deleteGroupFromUserRequest The group user data to unlink
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGroupFromUser(
      groupId: string,
      deleteGroupFromUserRequest: DeleteGroupFromUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteGroupFromUser(
          groupId,
          deleteGroupFromUserRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.deleteGroupFromUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all users attached to group
     * @param {string} groupId A group identifier or slug
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListGroupUsersOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listGroupUsers(
      groupId: string,
      search?: string,
      sort?: string,
      order?: ListGroupUsersOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ListGroupUsers200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listGroupUsers(
        groupId,
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.listGroupUsers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch all available groups
     * @param {string} [search] Search query
     * @param {string} [sort] Sorting column
     * @param {ListGroupsOrderEnum} [order] Sorting order
     * @param {number} [limit] Paging limit
     * @param {number} [offset] Paging offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listGroups(
      search?: string,
      sort?: string,
      order?: ListGroupsOrderEnum,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ListGroups200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listGroups(
        search,
        sort,
        order,
        limit,
        offset,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.listGroups"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update user perms for group
     * @param {string} groupId A group identifier or slug
     * @param {PermitGroupUserRequest} permitGroupUserRequest The group user data to permit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async permitGroupUser(
      groupId: string,
      permitGroupUserRequest: PermitGroupUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.permitGroupUser(
        groupId,
        permitGroupUserRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.permitGroupUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Fetch a specific group
     * @param {string} groupId A group identifier or slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showGroup(
      groupId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showGroup(
        groupId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.showGroup"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a specific group
     * @param {string} groupId A group identifier or slug
     * @param {CreateGroupRequest} createGroupRequest The group data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateGroup(
      groupId: string,
      createGroupRequest: CreateGroupRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(
        groupId,
        createGroupRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GroupApi.updateGroup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GroupApiFp(configuration);
  return {
    /**
     *
     * @summary Attach a user to group
     * @param {GroupApiAttachGroupToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachGroupToUser(
      requestParameters: GroupApiAttachGroupToUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .attachGroupToUser(
          requestParameters.groupId,
          requestParameters.permitGroupUserRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new group
     * @param {GroupApiCreateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(
      requestParameters: GroupApiCreateGroupRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Group> {
      return localVarFp
        .createGroup(requestParameters.createGroupRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a specific group
     * @param {GroupApiDeleteGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(
      requestParameters: GroupApiDeleteGroupRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteGroup(requestParameters.groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unlink a user from group
     * @param {GroupApiDeleteGroupFromUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupFromUser(
      requestParameters: GroupApiDeleteGroupFromUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .deleteGroupFromUser(
          requestParameters.groupId,
          requestParameters.deleteGroupFromUserRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all users attached to group
     * @param {GroupApiListGroupUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGroupUsers(
      requestParameters: GroupApiListGroupUsersRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListGroupUsers200Response> {
      return localVarFp
        .listGroupUsers(
          requestParameters.groupId,
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch all available groups
     * @param {GroupApiListGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGroups(
      requestParameters: GroupApiListGroupsRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListGroups200Response> {
      return localVarFp
        .listGroups(
          requestParameters.search,
          requestParameters.sort,
          requestParameters.order,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user perms for group
     * @param {GroupApiPermitGroupUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    permitGroupUser(
      requestParameters: GroupApiPermitGroupUserRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Notification> {
      return localVarFp
        .permitGroupUser(
          requestParameters.groupId,
          requestParameters.permitGroupUserRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Fetch a specific group
     * @param {GroupApiShowGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showGroup(
      requestParameters: GroupApiShowGroupRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Group> {
      return localVarFp
        .showGroup(requestParameters.groupId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a specific group
     * @param {GroupApiUpdateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGroup(
      requestParameters: GroupApiUpdateGroupRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Group> {
      return localVarFp
        .updateGroup(
          requestParameters.groupId,
          requestParameters.createGroupRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for attachGroupToUser operation in GroupApi.
 * @export
 * @interface GroupApiAttachGroupToUserRequest
 */
export interface GroupApiAttachGroupToUserRequest {
  /**
   * A group identifier or slug
   * @type {string}
   * @memberof GroupApiAttachGroupToUser
   */
  readonly groupId: string;

  /**
   * The group user data to permit
   * @type {PermitGroupUserRequest}
   * @memberof GroupApiAttachGroupToUser
   */
  readonly permitGroupUserRequest: PermitGroupUserRequest;
}

/**
 * Request parameters for createGroup operation in GroupApi.
 * @export
 * @interface GroupApiCreateGroupRequest
 */
export interface GroupApiCreateGroupRequest {
  /**
   * The group data to create
   * @type {CreateGroupRequest}
   * @memberof GroupApiCreateGroup
   */
  readonly createGroupRequest: CreateGroupRequest;
}

/**
 * Request parameters for deleteGroup operation in GroupApi.
 * @export
 * @interface GroupApiDeleteGroupRequest
 */
export interface GroupApiDeleteGroupRequest {
  /**
   * A group identifier or slug
   * @type {string}
   * @memberof GroupApiDeleteGroup
   */
  readonly groupId: string;
}

/**
 * Request parameters for deleteGroupFromUser operation in GroupApi.
 * @export
 * @interface GroupApiDeleteGroupFromUserRequest
 */
export interface GroupApiDeleteGroupFromUserRequest {
  /**
   * A group identifier or slug
   * @type {string}
   * @memberof GroupApiDeleteGroupFromUser
   */
  readonly groupId: string;

  /**
   * The group user data to unlink
   * @type {DeleteGroupFromUserRequest}
   * @memberof GroupApiDeleteGroupFromUser
   */
  readonly deleteGroupFromUserRequest: DeleteGroupFromUserRequest;
}

/**
 * Request parameters for listGroupUsers operation in GroupApi.
 * @export
 * @interface GroupApiListGroupUsersRequest
 */
export interface GroupApiListGroupUsersRequest {
  /**
   * A group identifier or slug
   * @type {string}
   * @memberof GroupApiListGroupUsers
   */
  readonly groupId: string;

  /**
   * Search query
   * @type {string}
   * @memberof GroupApiListGroupUsers
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {string}
   * @memberof GroupApiListGroupUsers
   */
  readonly sort?: string;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof GroupApiListGroupUsers
   */
  readonly order?: ListGroupUsersOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof GroupApiListGroupUsers
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof GroupApiListGroupUsers
   */
  readonly offset?: number;
}

/**
 * Request parameters for listGroups operation in GroupApi.
 * @export
 * @interface GroupApiListGroupsRequest
 */
export interface GroupApiListGroupsRequest {
  /**
   * Search query
   * @type {string}
   * @memberof GroupApiListGroups
   */
  readonly search?: string;

  /**
   * Sorting column
   * @type {string}
   * @memberof GroupApiListGroups
   */
  readonly sort?: string;

  /**
   * Sorting order
   * @type {'asc' | 'desc'}
   * @memberof GroupApiListGroups
   */
  readonly order?: ListGroupsOrderEnum;

  /**
   * Paging limit
   * @type {number}
   * @memberof GroupApiListGroups
   */
  readonly limit?: number;

  /**
   * Paging offset
   * @type {number}
   * @memberof GroupApiListGroups
   */
  readonly offset?: number;
}

/**
 * Request parameters for permitGroupUser operation in GroupApi.
 * @export
 * @interface GroupApiPermitGroupUserRequest
 */
export interface GroupApiPermitGroupUserRequest {
  /**
   * A group identifier or slug
   * @type {string}
   * @memberof GroupApiPermitGroupUser
   */
  readonly groupId: string;

  /**
   * The group user data to permit
   * @type {PermitGroupUserRequest}
   * @memberof GroupApiPermitGroupUser
   */
  readonly permitGroupUserRequest: PermitGroupUserRequest;
}

/**
 * Request parameters for showGroup operation in GroupApi.
 * @export
 * @interface GroupApiShowGroupRequest
 */
export interface GroupApiShowGroupRequest {
  /**
   * A group identifier or slug
   * @type {string}
   * @memberof GroupApiShowGroup
   */
  readonly groupId: string;
}

/**
 * Request parameters for updateGroup operation in GroupApi.
 * @export
 * @interface GroupApiUpdateGroupRequest
 */
export interface GroupApiUpdateGroupRequest {
  /**
   * A group identifier or slug
   * @type {string}
   * @memberof GroupApiUpdateGroup
   */
  readonly groupId: string;

  /**
   * The group data to update
   * @type {CreateGroupRequest}
   * @memberof GroupApiUpdateGroup
   */
  readonly createGroupRequest: CreateGroupRequest;
}

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
  /**
   *
   * @summary Attach a user to group
   * @param {GroupApiAttachGroupToUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public attachGroupToUser(
    requestParameters: GroupApiAttachGroupToUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .attachGroupToUser(
        requestParameters.groupId,
        requestParameters.permitGroupUserRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new group
   * @param {GroupApiCreateGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public createGroup(
    requestParameters: GroupApiCreateGroupRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .createGroup(requestParameters.createGroupRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a specific group
   * @param {GroupApiDeleteGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public deleteGroup(
    requestParameters: GroupApiDeleteGroupRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .deleteGroup(requestParameters.groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unlink a user from group
   * @param {GroupApiDeleteGroupFromUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public deleteGroupFromUser(
    requestParameters: GroupApiDeleteGroupFromUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .deleteGroupFromUser(
        requestParameters.groupId,
        requestParameters.deleteGroupFromUserRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all users attached to group
   * @param {GroupApiListGroupUsersRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public listGroupUsers(
    requestParameters: GroupApiListGroupUsersRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .listGroupUsers(
        requestParameters.groupId,
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch all available groups
   * @param {GroupApiListGroupsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public listGroups(
    requestParameters: GroupApiListGroupsRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .listGroups(
        requestParameters.search,
        requestParameters.sort,
        requestParameters.order,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user perms for group
   * @param {GroupApiPermitGroupUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public permitGroupUser(
    requestParameters: GroupApiPermitGroupUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .permitGroupUser(
        requestParameters.groupId,
        requestParameters.permitGroupUserRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Fetch a specific group
   * @param {GroupApiShowGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public showGroup(
    requestParameters: GroupApiShowGroupRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .showGroup(requestParameters.groupId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a specific group
   * @param {GroupApiUpdateGroupRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GroupApi
   */
  public updateGroup(
    requestParameters: GroupApiUpdateGroupRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GroupApiFp(this.configuration)
      .updateGroup(
        requestParameters.groupId,
        requestParameters.createGroupRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * @export
 */
export const ListGroupUsersOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListGroupUsersOrderEnum =
  (typeof ListGroupUsersOrderEnum)[keyof typeof ListGroupUsersOrderEnum];
/**
 * @export
 */
export const ListGroupsOrderEnum = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type ListGroupsOrderEnum =
  (typeof ListGroupsOrderEnum)[keyof typeof ListGroupsOrderEnum];
